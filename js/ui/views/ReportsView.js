export default class ReportsView {
    constructor(modules, state, eventBus) {
        this.reportsModule = modules.reports;
        this.state = state;
        this.eventBus = eventBus;
    }

    render() {
        const allTimeStats = this.reportsModule.getAllTimeStats();
        const originReport = this.reportsModule.getReportByOrigin();
        const vendorReport = this.reportsModule.getReportByVendor();
        const monthlyReport = this.reportsModule.getReportByMonth();
        const topClients = this.reportsModule.getTopClients(5);

        return `
            <div class="reports-view">
                <h2>üìä –û—Ç—á–µ—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏</h2>
                
                <div class="summary-cards">
                    <div class="summary-card">
                        <h3>–û–ë–©–û –ü–û–†–™–ß–ö–ò</h3>
                        <div class="value">${allTimeStats.totalOrders}</div>
                    </div>
                    <div class="summary-card" style="background: linear-gradient(135deg, #28a745 0%, #20c997 100%);">
                        <h3>–û–ë–©–û –ü–†–ò–•–û–î–ò</h3>
                        <div class="value">${allTimeStats.totalRevenue.toFixed(2)} –ª–≤</div>
                    </div>
                    <div class="summary-card" style="background: linear-gradient(135deg, #ffc107 0%, #ff9800 100%);">
                        <h3>–ù–ï–¢–ù–ê –ü–ï–ß–ê–õ–ë–ê</h3>
                        <div class="value">${allTimeStats.netProfit.toFixed(2)} –ª–≤</div>
                    </div>
                    <div class="summary-card" style="background: linear-gradient(135deg, #17a2b8 0%, #138496 100%);">
                        <h3>–°–†–ï–î–ù–ê –ü–ï–ß–ê–õ–ë–ê</h3>
                        <div class="value">${allTimeStats.avgProfit.toFixed(2)} –ª–≤</div>
                    </div>
                </div>
                
                <div class="reports-grid">
                    <div class="report-card">
                        <h3>üìä –ü–æ –∏–∑—Ç–æ—á–Ω–∏–∫</h3>
                        ${this.renderReportTable(originReport, '–ò–∑—Ç–æ—á–Ω–∏–∫')}
                    </div>
                    
                    <div class="report-card">
                        <h3>üë• –ü–æ –¥–æ—Å—Ç–∞–≤—á–∏–∫</h3>
                        ${this.renderReportTable(vendorReport, '–î–æ—Å—Ç–∞–≤—á–∏–∫')}
                    </div>
                    
                    <div class="report-card">
                        <h3>üìÖ –ü–æ –º–µ—Å–µ—Ü</h3>
                        ${this.renderMonthlyTable(monthlyReport)}
                    </div>
                    
                    <div class="report-card">
                        <h3>üèÜ –¢–æ–ø –∫–ª–∏–µ–Ω—Ç–∏</h3>
                        ${this.renderTopClients(topClients)}
                    </div>
                </div>
            </div>
        `;
    }

    renderReportTable(data, label) {
        const sorted = Object.entries(data).sort((a, b) => b[1].profit - a[1].profit);

        return `
            <table class="report-table">
                <thead>
                    <tr>
                        <th>${label}</th>
                        <th>–ë—Ä–æ–π</th>
                        <th>–ü–µ—á–∞–ª–±–∞</th>
                    </tr>
                </thead>
                <tbody>
                    ${sorted.map(([key, val]) => `
                        <tr>
                            <td>${key}</td>
                            <td>${val.count}</td>
                            <td>${val.profit.toFixed(2)} –ª–≤</td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
    }

    renderMonthlyTable(data) {
        const sorted = Object.entries(data).sort((a, b) => b[0].localeCompare(a[0]));

        return `
            <table class="report-table">
                <thead>
                    <tr>
                        <th>–ú–µ—Å–µ—Ü</th>
                        <th>–ü–æ—Ä—ä—á–∫–∏</th>
                        <th>–ü–µ—á–∞–ª–±–∞</th>
                    </tr>
                </thead>
                <tbody>
                    ${sorted.map(([month, val]) => `
                        <tr>
                            <td>${this.formatMonth(month)}</td>
                            <td>${val.count}</td>
                            <td>${(val.profit - val.expenses).toFixed(2)} –ª–≤</td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
    }

    renderTopClients(clients) {
        return `
            <table class="report-table">
                <thead>
                    <tr>
                        <th>–ö–ª–∏–µ–Ω—Ç</th>
                        <th>–ü–æ—Ä—ä—á–∫–∏</th>
                        <th>–ü—Ä–∏—Ö–æ–¥–∏</th>
                    </tr>
                </thead>
                <tbody>
                    ${clients.map(c => `
                        <tr>
                            <td>${c.client}</td>
                            <td>${c.count}</td>
                            <td>${c.revenue.toFixed(2)} –ª–≤</td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
    }

    formatMonth(monthKey) {
        const [year, month] = monthKey.split('-');
        const months = ['–Ø–Ω', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–Æ–Ω–∏', '–Æ–ª–∏', '–ê–≤–≥', '–°–µ–ø', '–û–∫—Ç', '–ù–æ–µ', '–î–µ–∫'];
        return `${months[parseInt(month) - 1]} ${year}`;
    }

    attachListeners() {
        // Reports don't need many listeners
    }
}