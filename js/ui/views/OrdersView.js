import { DebounceUtils } from '../../utils/DebounceUtils.js';

export default class OrdersView {
    constructor(modules, state, eventBus) {
        this.ordersModule = modules.orders;
        this.clientsModule = modules.clients;
        this.reportsModule = modules.reports;
        this.state = state;
        this.eventBus = eventBus;
        this.debouncedRefresh = DebounceUtils.debounce(() => this.refresh(), 300);
        this.storage = modules.orders.storage;
        this.filters = {
            status: 'all',
            search: '',
            origin: '',
            vendor: ''
        };
        this.selectedOrders = new Set(); // –ó–∞ bulk –æ–ø–µ—Ä–∞—Ü–∏–∏
    }

    render() {
        const stats = this.reportsModule.getMonthlyStats();
        const orders = this.ordersModule.filterOrders(this.filters);

        return `
            <div class="orders-view">
                ${this.renderStats(stats)}
                ${this.renderControls()}
                ${this.renderBulkActions()}
                ${this.renderFilters()}
                ${this.renderTable(orders)}
            </div>
        `;
    }

    renderBulkActions() {
        return `
        <div id="bulk-actions" class="bulk-actions" style="display: none;">
            <div class="bulk-info">
                <span id="selected-count">0</span> –ø–æ—Ä—ä—á–∫–∏ –∏–∑–±—Ä–∞–Ω–∏
            </div>
            <div class="bulk-controls">
                <select id="bulk-status" class="bulk-select">
                    <option value="">-- –ü—Ä–æ–º–µ–Ω–∏ —Å—Ç–∞—Ç—É—Å --</option>
                    <option value="–û—á–∞–∫–≤–∞–Ω">–û—á–∞–∫–≤–∞–Ω</option>
                    <option value="–î–æ—Å—Ç–∞–≤–µ–Ω">–î–æ—Å—Ç–∞–≤–µ–Ω</option>
                    <option value="–°–≤–æ–±–æ–¥–µ–Ω">–°–≤–æ–±–æ–¥–µ–Ω</option>
                    <option value="–î—Ä—É–≥–∏">–î—Ä—É–≥–∏</option>
                </select>
                <button class="btn btn-sm" id="apply-bulk-status">
                    –ü—Ä–∏–ª–æ–∂–∏
                </button>
                <button class="btn btn-sm secondary" id="clear-selection">
                    –ò–∑—á–∏—Å—Ç–∏ –∏–∑–±–æ—Ä–∞
                </button>
                <button class="btn btn-sm danger" id="bulk-delete">
                    –ò–∑—Ç—Ä–∏–π –∏–∑–±—Ä–∞–Ω–∏—Ç–µ
                </button>
            </div>
        </div>
    `;
    }

    renderTable(orders) {
        return `
            <div style="overflow-x: auto;">
                <table class="orders-table">
                    <thead>
                        <tr>
                            <th style="width: 40px;"></th>
                            <th>–î–∞—Ç–∞</th>
                            <th>–ö–ª–∏–µ–Ω—Ç</th>
                            <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                            <th>–ò–∑—Ç–æ—á–Ω–∏–∫</th>
                            <th>–î–æ—Å—Ç–∞–≤—á–∏–∫</th>
                            <th>–ú–æ–¥–µ–ª</th>
                            <th>–û–±—â–æ (BGN)</th>
                            <th>–ü-–Ω–∞ —Ü–µ–Ω–∞ (BGN)</th>
                            <th>–ë–∞–ª–∞–Ω—Å (BGN)</th>
                            <th>–ü—ä–ª–µ–Ω —Å–µ—Ç</th>
                            <th>–°—Ç–∞—Ç—É—Å</th>
                            <th>–ë–µ–ª–µ–∂–∫–∏</th>
                            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${orders.map(order => this.renderOrderRow(order)).join('')}
                    </tbody>
                </table>
            </div>
        `;
    }

    renderOrderRow(order) {
        const statusClass = this.ordersModule.getStatusClass(order.status);
        const isSelected = this.selectedOrders.has(order.id);

        return `
            <tr data-order-id="${order.id}" class="${isSelected ? 'selected-row' : ''}">
                <td>
                    <input type="checkbox" 
                           class="order-checkbox" 
                           data-id="${order.id}"
                           ${isSelected ? 'checked' : ''}>
                </td>
                <td>${this.formatDate(order.date)}</td>
                <td>${order.client}</td>
                <td>${order.phone || ''}</td>
                <td><span class="badge" style="background: ${this.getOriginColor(order.origin)}">${order.origin}</span></td>
                <td>${order.vendor}</td>
                <td class="image-cell">
                    ${order.imageData ?
            `<img src="${order.imageData}" 
                             class="model-image" 
                             alt="${order.model}" 
                             title="${order.model}"
                             onclick="window.app.ui.modals.open({
                                 type: 'image',
                                 imageSrc: '${order.imageData}',
                                 title: '${order.model}',
                                 caption: '–ö–ª–∏–µ–Ω—Ç: ${order.client} | –î–∞—Ç–∞: ${this.formatDate(order.date)}'
                             })">` :
            `<div class="no-image-placeholder">${order.model}</div>`
        }
                </td>
                <td><strong>${order.totalBGN.toFixed(2)} –ª–≤</strong></td>
                <td>${order.sellBGN.toFixed(2)} –ª–≤</td>
                <td><strong style="color: ${order.balanceBGN < 0 ? '#dc3545' : '#28a745'}">${order.balanceBGN.toFixed(2)} –ª–≤</strong></td>
                <td>${order.fullSet ? '‚úÖ' : '‚ùå'}</td>
                <td><span class="status-badge ${statusClass}">${order.status}</span></td>
                <td>${order.notes}</td>
<td>
    <button class="btn btn-sm" data-action="edit" data-id="${order.id}" title="–†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ">‚úèÔ∏è</button>
    <button class="btn btn-sm info" data-action="duplicate" data-id="${order.id}" title="–î—É–±–ª–∏—Ä–∞–Ω–µ">üìã</button>
    <button class="btn btn-sm danger" data-action="delete" data-id="${order.id}" title="–ò–∑—Ç—Ä–∏–≤–∞–Ω–µ">üóëÔ∏è</button>
</td>
            </tr>
        `;
    }

    attachListeners() {
        // Existing listeners...
        this.attachExistingListeners();

        // Bulk operation listeners
        this.attachBulkListeners();
    }

    attachBulkListeners() {
        // Select all checkbox
        document.getElementById('select-all')?.addEventListener('change', (e) => {
            const checkboxes = document.querySelectorAll('.order-checkbox');
            checkboxes.forEach(cb => {
                cb.checked = e.target.checked;
                const orderId = parseInt(cb.dataset.id);
                if (e.target.checked) {
                    this.selectedOrders.add(orderId);
                } else {
                    this.selectedOrders.delete(orderId);
                }
            });
            this.updateBulkUI();
        });

        // Individual checkboxes
        document.querySelectorAll('.order-checkbox').forEach(cb => {
            cb.addEventListener('change', (e) => {
                const orderId = parseInt(e.target.dataset.id);
                if (e.target.checked) {
                    this.selectedOrders.add(orderId);
                } else {
                    this.selectedOrders.delete(orderId);
                }
                this.updateBulkUI();
            });
        });

        // –î–û–ë–ê–í–ï–¢–ï –¢–ï–ó–ò –ù–û–í–ò LISTENERS –¢–£–ö:
        // Bulk action buttons
        document.getElementById('apply-bulk-status')?.addEventListener('click', () => {
            this.applyBulkStatus();
        });

        document.getElementById('clear-selection')?.addEventListener('click', () => {
            this.clearSelection();
        });

        document.getElementById('bulk-delete')?.addEventListener('click', () => {
            this.bulkDelete();
        });
    }

    updateBulkUI() {
        const bulkActions = document.getElementById('bulk-actions');
        const selectedCount = document.getElementById('selected-count');

        if (this.selectedOrders.size > 0) {
            bulkActions.style.display = 'flex';
            selectedCount.textContent = this.selectedOrders.size;

            // Update rows visual state
            document.querySelectorAll('tr[data-order-id]').forEach(row => {
                const orderId = parseInt(row.dataset.orderId);
                if (this.selectedOrders.has(orderId)) {
                    row.classList.add('selected-row');
                } else {
                    row.classList.remove('selected-row');
                }
            });
        } else {
            bulkActions.style.display = 'none';
        }
    }

    applyBulkStatus() {
        const newStatus = document.getElementById('bulk-status').value;
        if (!newStatus) {
            this.eventBus.emit('notification:show', {
                message: '–ú–æ–ª—è –∏–∑–±–µ—Ä–µ—Ç–µ —Å—Ç–∞—Ç—É—Å',
                type: 'error'
            });
            return;
        }

        if (confirm(`–ü—Ä–æ–º—è–Ω–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ ${this.selectedOrders.size} –ø–æ—Ä—ä—á–∫–∏ –Ω–∞ "${newStatus}"?`)) {
            let updated = 0;

            // –î–∏—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –≤ localStorage
            const monthlyData = JSON.parse(localStorage.getItem('orderSystem_monthlyData'));
            const currentMonth = this.state.get('currentMonth');

            this.selectedOrders.forEach(orderId => {
                const orderIndex = monthlyData[currentMonth].orders.findIndex(o => o.id === orderId);
                if (orderIndex !== -1) {
                    monthlyData[currentMonth].orders[orderIndex].status = newStatus;
                    updated++;
                }
            });

            // –ó–∞–ø–∞–∑–≤–∞–Ω–µ
            localStorage.setItem('orderSystem_monthlyData', JSON.stringify(monthlyData));

            // –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ state
            this.state.set('monthlyData', monthlyData);

            this.eventBus.emit('notification:show', {
                message: `–°—Ç–∞—Ç—É—Å—ä—Ç –Ω–∞ ${updated} –ø–æ—Ä—ä—á–∫–∏ –µ –ø—Ä–æ–º–µ–Ω–µ–Ω`,
                type: 'success'
            });

            // –ü—Ä–µ–∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ü—è–ª–æ—Ç–æ view
            this.selectedOrders.clear();
            window.app.ui.switchView('orders');
        }
    }

    bulkDelete() {
        if (confirm(`–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑—Ç—Ä–∏–µ—Ç–µ ${this.selectedOrders.size} –ø–æ—Ä—ä—á–∫–∏?`)) {
            let deleted = 0;
            const orderIds = Array.from(this.selectedOrders); // Convert to array first

            // Delete each order individually to ensure proper state management
            orderIds.forEach(orderId => {
                try {
                    this.ordersModule.delete(orderId);
                    deleted++;
                } catch (error) {
                    console.error(`Error deleting order ${orderId}:`, error);
                }
            });

            // Clear selection immediately
            this.selectedOrders.clear();

            // Show notification
            this.eventBus.emit('notification:show', {
                message: `${deleted} –ø–æ—Ä—ä—á–∫–∏ –±—è—Ö–∞ –∏–∑—Ç—Ä–∏—Ç–∏`,
                type: 'success'
            });

            // Force immediate UI refresh without timeout
            this.refresh();

            // Update bulk UI state
            this.updateBulkUI();
        }
    }

    clearSelection() {
        this.selectedOrders.clear();
        document.querySelectorAll('.order-checkbox').forEach(cb => cb.checked = false);
        document.getElementById('select-all').checked = false;
        this.updateBulkUI();
    }

    // –û—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ –º–µ—Ç–æ–¥–∏ –æ—Å—Ç–∞–≤–∞—Ç —Å—ä—â–∏—Ç–µ...
    attachExistingListeners() {
        // –ö–æ–ø–∏—Ä–∞–π—Ç–µ –≤—Å–∏—á–∫–∏ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏ listeners —Ç—É–∫
        // New order button
        document.getElementById('new-order-btn')?.addEventListener('click', () => {
            this.eventBus.emit('modal:open', { type: 'order', mode: 'create' });
        });

        // Status filters
        document.querySelectorAll('[data-filter-status]').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.filters.status = e.target.dataset.filterStatus;
                this.refresh();
            });
        });

        // Search input
        document.getElementById('searchInput')?.addEventListener('input', (e) => {
            this.filters.search = e.target.value;
            this.debouncedRefresh();
        });

        // Origin filter
        document.getElementById('filterOrigin')?.addEventListener('change', (e) => {
            this.filters.origin = e.target.value;
            this.refresh();
        });

        // Vendor filter
        document.getElementById('filterVendor')?.addEventListener('change', (e) => {
            this.filters.vendor = e.target.value;
            this.refresh();
        });

        // Order actions
        document.querySelectorAll('[data-action="edit"]').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const orderId = parseInt(e.target.dataset.id);
                this.eventBus.emit('modal:open', { type: 'order', mode: 'edit', id: orderId });
            });
        });

        document.querySelectorAll('[data-action="duplicate"]').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const orderId = parseInt(e.target.dataset.id);
                this.eventBus.emit('modal:open', { type: 'order', mode: 'duplicate', id: orderId });
            });
        });

        document.querySelectorAll('[data-action="delete"]').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const orderId = parseInt(e.target.dataset.id);
                if (confirm('–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑—Ç—Ä–∏–µ—Ç–µ —Ç–∞–∑–∏ –ø–æ—Ä—ä—á–∫–∞?')) {
                    this.ordersModule.delete(orderId);
                    this.refresh();
                }
            });
        });
    }

// js/ui/views/OrdersView.js - Replace the refresh() method

    refresh() {
        // Store current focus info before DOM destruction
        const focusedElement = document.activeElement;
        const focusId = focusedElement?.id;
        const selectionStart = focusedElement?.selectionStart;
        const selectionEnd = focusedElement?.selectionEnd;
        const isSearchInput = focusId === 'searchInput';

        // Clear selection and re-render
        this.selectedOrders.clear();
        const container = document.getElementById('view-container');
        if (container) {
            container.innerHTML = this.render();
            this.attachListeners();

            // Restore focus if it was on search input
            if (isSearchInput) {
                const newSearchInput = document.getElementById('searchInput');
                if (newSearchInput) {
                    newSearchInput.focus();
                    // Restore cursor position
                    if (typeof selectionStart === 'number') {
                        newSearchInput.setSelectionRange(selectionStart, selectionEnd);
                    }
                }
            }
        }
    }

// –î–æ–±–∞–≤–∏ –Ω–æ–≤ –º–µ—Ç–æ–¥ –∑–∞ smart refresh
    smartRefresh(eventData) {
        // –ê–∫–æ –ø–æ—Ä—ä—á–∫–∞—Ç–∞ –µ —Å—ä–∑–¥–∞–¥–µ–Ω–∞/–æ–±–Ω–æ–≤–µ–Ω–∞ –≤ –¥—Ä—É–≥ –º–µ—Å–µ—Ü, –ø–æ–∫–∞–∂–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if (eventData && eventData.createdInMonth) {
            const currentMonth = this.state.get('currentMonth');
            if (eventData.createdInMonth !== currentMonth) {
                this.eventBus.emit('notification:show', {
                    message: `–ü–æ—Ä—ä—á–∫–∞—Ç–∞ –µ —Å—ä–∑–¥–∞–¥–µ–Ω–∞ –≤ ${this.formatMonth(eventData.createdInMonth)}. –°–º–µ–Ω–µ—Ç–µ –º–µ—Å–µ—Ü–∞ –∑–∞ –¥–∞ —è –≤–∏–¥–∏—Ç–µ.`,
                    type: 'info'
                });
            }
        }

        if (eventData && eventData.movedToMonth) {
            const currentMonth = this.state.get('currentMonth');
            if (eventData.movedToMonth !== currentMonth) {
                this.eventBus.emit('notification:show', {
                    message: `–ü–æ—Ä—ä—á–∫–∞—Ç–∞ –µ –ø—Ä–µ–º–µ—Å—Ç–µ–Ω–∞ –≤ ${this.formatMonth(eventData.movedToMonth)}. –°–º–µ–Ω–µ—Ç–µ –º–µ—Å–µ—Ü–∞ –∑–∞ –¥–∞ —è –≤–∏–¥–∏—Ç–µ.`,
                    type: 'info'
                });
            }
        }

        this.refresh();
    }

    formatMonth(monthKey) {
        const [year, month] = monthKey.split('-');
        const months = ['–Ø–Ω', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–Æ–Ω–∏', '–Æ–ª–∏', '–ê–≤–≥', '–°–µ–ø', '–û–∫—Ç', '–ù–æ–µ', '–î–µ–∫'];
        return `${months[parseInt(month) - 1]} ${year}`;
    }

    // Utility methods remain the same
    renderStats(stats) {
        return `
            <div class="month-stats">
                <div class="stat-item">
                    <div class="stat-label">–ü–æ—Ä—ä—á–∫–∏ —Ç–æ–∑–∏ –º–µ—Å–µ—Ü</div>
                    <div class="stat-value">${stats.orderCount}</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">–ü—Ä–∏—Ö–æ–¥–∏</div>
                    <div class="stat-value">${stats.revenue.toFixed(2)} –ª–≤</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">–†–∞–∑—Ö–æ–¥–∏</div>
                    <div class="stat-value">${stats.expenses.toFixed(2)} –ª–≤</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">–ü–µ—á–∞–ª–±–∞</div>
                    <div class="stat-value">${stats.profit.toFixed(2)} –ª–≤</div>
                </div>
            </div>
        `;
    }

    renderControls() {
        return `
            <div class="controls">
                <button class="btn" id="new-order-btn">‚ûï –ù–æ–≤–∞ –ø–æ—Ä—ä—á–∫–∞</button>
                <button class="btn secondary" data-filter-status="all">–í—Å–∏—á–∫–∏</button>
                <button class="btn" style="background: #ffc107;" data-filter-status="pending">–û—á–∞–∫–≤–∞–Ω–∏</button>
                <button class="btn success" data-filter-status="delivered">–î–æ—Å—Ç–∞–≤–µ–Ω–∏</button>
                <button class="btn info" data-filter-status="free">–°–≤–æ–±–æ–¥–Ω–∏</button>
                <button class="btn info" data-filter-status="other">–î—Ä—É–≥–∏</button>
            </div>
        `;
    }

    renderFilters() {
        const settings = this.state.get('settings');
        return `
            <div class="filter-section">
                <div class="filter-group">
                    <label>–¢—ä—Ä—Å–µ–Ω–µ:</label>
                    <input type="text" id="searchInput" placeholder="–ö–ª–∏–µ–Ω—Ç, –º–æ–¥–µ–ª..." value="${this.filters.search}">
                </div>
                <div class="filter-group">
                    <label>–ò–∑—Ç–æ—á–Ω–∏–∫:</label>
                    <select id="filterOrigin">
                        <option value="">–í—Å–∏—á–∫–∏</option>
                        ${settings.origins.map(o => `<option value="${o}">${o}</option>`).join('')}
                    </select>
                </div>
                <div class="filter-group">
                    <label>–î–æ—Å—Ç–∞–≤—á–∏–∫:</label>
                    <select id="filterVendor">
                        <option value="">–í—Å–∏—á–∫–∏</option>
                        ${settings.vendors.map(v => `<option value="${v}">${v}</option>`).join('')}
                    </select>
                </div>
            </div>
        `;
    }

    formatDate(dateStr) {
        return new Date(dateStr).toLocaleDateString('bg-BG');
    }

    getOriginColor(origin) {
        const colors = {
            'OLX': '#dc3545',
            'Bazar.bg': '#ff9800',
            'Instagram': '#667eea',
            'WhatsApp': '#28a745',
            'Facebook': '#3b5998',
            'IG Ads': '#764ba2'
        };
        return colors[origin] || '#6c757d';
    }
}