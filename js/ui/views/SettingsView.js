import {StorageService} from "../../core/StorageService.js";

export default class SettingsView {
    constructor(modules, state, eventBus) {
        this.settingsModule = modules.settings;
        this.state = state;
        this.eventBus = eventBus;
        this.storage = new StorageService();
    }

    // --- helpers ---
    _escape(s = '') {
        return String(s)
            .replaceAll('&', '&amp;')
            .replaceAll('<', '&lt;')
            .replaceAll('>', '&gt;')
            .replaceAll('"', '&quot;')
            .replaceAll("'", '&#39;');
    }
    _num(v, fallback = 0) {
        const n = parseFloat(v);
        return Number.isFinite(n) ? n : fallback;
    }
    _lines(text) {
        if (!text) return [];
        return text.split('\n').map(s => s.trim()).filter(Boolean);
    }

    async render() {
        try {
            // GET SETTINGS FROM SUPABASE/ASYNC
            const s = await this.settingsModule.getSettings() || {};

            const usdRate = this._escape(s.usdRate ?? 0);
            const factoryShipping = this._escape(s.factoryShipping ?? 0);
            const origins = Array.isArray(s.origins) ? s.origins : (typeof s.origins === 'string' ? s.origins.split('\n') : []);
            const vendors = Array.isArray(s.vendors) ? s.vendors : (typeof s.vendors === 'string' ? s.vendors.split('\n') : []);

            return `
          <div class="settings-view">
            <h2>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞</h2>

            <div class="settings-grid">
              <div class="settings-card">
                <h3>üí± –í–∞–ª—É—Ç–µ–Ω –∫—É—Ä—Å</h3>
                <div class="form-group">
                  <label>–ö—É—Ä—Å USD ‚Üí BGN:</label>
                  <input type="number" id="usdRate" value="${usdRate}" step="0.01">
                </div>
              </div>

              <div class="settings-card">
                <h3>üöö –î–æ—Å—Ç–∞–≤–∫–∞</h3>
                <div class="form-group">
                  <label>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ (USD):</label>
                  <input type="number" id="factoryShipping" value="${factoryShipping}" step="0.1">
                </div>
              </div>

              <div class="settings-card">
                <h3>üìç –ò–∑—Ç–æ—á–Ω–∏—Ü–∏</h3>
                <div class="form-group">
                  <label>–°–ø–∏—Å—ä–∫ (–ø–æ –µ–¥–∏–Ω –Ω–∞ —Ä–µ–¥):</label>
                  <textarea id="originsList" rows="8">${this._escape(origins.join('\n'))}</textarea>
                </div>
              </div>

              <div class="settings-card">
                <h3>üë• –î–æ—Å—Ç–∞–≤—á–∏—Ü–∏</h3>
                <div class="form-group">
                  <label>–°–ø–∏—Å—ä–∫ (–ø–æ –µ–¥–∏–Ω –Ω–∞ —Ä–µ–¥):</label>
                  <textarea id="vendorsList" rows="8">${this._escape(vendors.join('\n'))}</textarea>
                </div>
              </div>
            </div>

            <br>
            <button class="btn success" id="save-settings">üíæ –ó–∞–ø–∞–∑–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏—Ç–µ</button>

            <div class="settings-card" style="margin-top:30px;border-color:#17a2b8;">
              <h3>üìÅ Backup & Restore</h3>
              <div style="display:flex;gap:15px;flex-wrap:wrap;">
                <button class="btn info" id="export-data">üì§ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω–∏ (JSON)</button>
                <div>
                  <input type="file" id="importFile" accept=".json" style="display:none;">
                  <button class="btn info" id="import-data">üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω–∏ (JSON)</button>
                </div>
              </div>
              <p style="margin-top:10px;font-size:12px;color:#6c757d;">
                –ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–π—Ç–µ –≤—Å–∏—á–∫–∏ –¥–∞–Ω–Ω–∏ –∫–∞—Ç–æ JSON —Ñ–∞–π–ª –∑–∞ backup –∏–ª–∏ –ø—Ä–µ—Ö–≤—ä—Ä–ª—è–Ω–µ –Ω–∞ –¥—Ä—É–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.
              </p>
            </div>
          </div>
        `;

        } catch (error) {
            console.error('‚ùå Failed to load settings:', error);
            return `
                <div class="error-state">
                    <h3>‚ùå Failed to load settings</h3>
                    <p>Error: ${error.message}</p>
                    <button onclick="window.app.ui.currentView.refresh()" class="btn">üîÑ Retry</button>
                </div>
            `;
        }
    }

    attachListeners() {
        const $ = (id) => document.getElementById(id);

        // Save settings - MAKE ASYNC
        $('save-settings')?.addEventListener('click', async () => {
            const settings = {
                usdRate: this._num($('usdRate')?.value, 0),
                factoryShipping: this._num($('factoryShipping')?.value, 0),
                origins: this._lines($('originsList')?.value),
                vendors: this._lines($('vendorsList')?.value)
            };

            try {
                // ASYNC SETTINGS UPDATE
                await this.settingsModule.updateSettings(settings);
                this.eventBus?.emit('notification:show', { message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏—Ç–µ —Å–∞ –∑–∞–ø–∞–∑–µ–Ω–∏!', type: 'success' });
            } catch (err) {
                console.error(err);
                this.eventBus?.emit('notification:show', { message: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ: ' + err.message, type: 'error' });
            }
        });

        // Export data - MAKE ASYNC
        $('export-data')?.addEventListener('click', async () => {
            try {
                await this.storage.exportData();
                this.eventBus.emit('notification:show', {
                    message: '–î–∞–Ω–Ω–∏—Ç–µ —Å–∞ –µ–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–Ω–∏ —É—Å–ø–µ—à–Ω–æ!',
                    type: 'success'
                });
            } catch (error) {
                this.eventBus.emit('notification:show', {
                    message: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç: ' + error.message,
                    type: 'error'
                });
            }
        });

        // Import data
        $('import-data')?.addEventListener('click', () => {
            document.getElementById('importFile').click();
        });

        $('importFile')?.addEventListener('change', async (e) => {
            const file = e.target.files[0];
            if (file) {
                if (confirm('–í–Ω–∏–º–∞–Ω–∏–µ! –¢–æ–≤–∞ —â–µ –ø—Ä–µ–∑–∞–ø–∏—à–µ –≤—Å–∏—á–∫–∏ —Ç–µ–∫—É—â–∏ –¥–∞–Ω–Ω–∏. –ü—Ä–æ–¥—ä–ª–∂–∏?')) {
                    try {
                        // Import the data
                        const importedData = await this.storage.importData(file);

                        // Update the state directly
                        this.state.update({
                            monthlyData: importedData.monthlyData,
                            clientsData: importedData.clientsData,
                            settings: importedData.settings
                        });

                        // Force reload after state update
                        this.eventBus.emit('notification:show', {
                            message: '–î–∞–Ω–Ω–∏—Ç–µ —Å–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–∏ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–µ–∑–∞—Ä–µ–∂–¥–∞–Ω–µ...',
                            type: 'success'
                        });

                        // Reload to refresh everything
                        setTimeout(() => {
                            window.location.reload(true); // Force reload from server
                        }, 1000);

                    } catch (error) {
                        this.eventBus.emit('notification:show', {
                            message: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç: ' + error.message,
                            type: 'error'
                        });
                    }
                }
                e.target.value = '';
            }
        });
    }

    // ADD ASYNC REFRESH METHOD
    async refresh() {
        const container = document.getElementById('view-container');
        if (container) {
            // Show loading
            container.innerHTML = `
                <div class="loading-state">
                    <h3>‚öôÔ∏è Loading settings...</h3>
                </div>
            `;

            try {
                const content = await this.render();
                container.innerHTML = content;
                this.attachListeners();
            } catch (error) {
                console.error('‚ùå Failed to refresh settings view:', error);
                container.innerHTML = `
                    <div class="error-state">
                        <h3>‚ùå Failed to load settings</h3>
                        <p>Error: ${error.message}</p>
                        <button onclick="window.app.ui.currentView.refresh()" class="btn">üîÑ Retry</button>
                    </div>
                `;
            }
        }
    }
}