export class ModalsManager {
    constructor(modules, state, eventBus) {
        this.modules = modules;
        this.state = state;
        this.eventBus = eventBus;
        this.currentModal = null;
        this.tempImageData = null;

        this.initContainer();
        this.attachGlobalListeners();
    }

    initContainer() {
        if (!document.getElementById('modal-container')) {
            const container = document.createElement('div');
            container.id = 'modal-container';
            document.body.appendChild(container);
        }
    }

    attachGlobalListeners() {
        // Listen for modal open requests
        this.eventBus.on('modal:open', (data) => this.open(data));

        // Close modal on ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.currentModal) {
                this.close();
            }
        });

        // Handle paste for images
        document.addEventListener('paste', (e) => {
            if (this.currentModal && (this.currentModal.type === 'order')) {
                this.handleImagePaste(e);
            }
        });
    }

    open(data) {
        this.currentModal = data;
        const container = document.getElementById('modal-container');

        let modalContent = '';
        switch(data.type) {
            case 'order':
                modalContent = this.renderOrderModal(data);
                break;
            case 'client':
                modalContent = this.renderClientModal(data);
                break;
            case 'inventory':
                modalContent = this.renderInventoryModal(data);
                break;
            case 'expense':
                modalContent = this.renderExpenseModal(data);
                break;
            case 'image':
                modalContent = this.renderImageModal(data);
                break;
            case 'clientProfile':
                modalContent = this.renderClientProfileModal(data);
                break;
            default:
                return;
        }

        container.innerHTML = modalContent;
        container.querySelector('.modal').classList.add('active');

        this.attachModalListeners();
    }

    close() {
        const container = document.getElementById('modal-container');
        const modal = container.querySelector('.modal');
        if (modal) {
            modal.classList.remove('active');
            setTimeout(() => {
                container.innerHTML = '';
                this.currentModal = null;
                this.tempImageData = null;
            }, 300);
        }
    }

    renderOrderModal(data) {
        const isEdit = data.mode === 'edit';
        const isDuplicate = data.mode === 'duplicate';
        const order = (isEdit || isDuplicate) ? this.modules.orders.getOrders().find(o => o.id === data.id) : null;

// –ó–∞ –¥—É–±–ª–∏—Ä–∞–Ω–µ, —Å—ä–∑–¥–∞–≤–∞–º–µ –Ω–æ–≤ –æ–±–µ–∫—Ç —Å reset-–Ω–∞—Ç–∏ –ø–æ–ª–µ—Ç–∞
        const formData = isDuplicate && order ? {
            ...order,
            id: null, // –ø—Ä–µ–º–∞—Ö–≤–∞–º–µ ID –∑–∞ –¥–∞ —Å–µ —Å—ä–∑–¥–∞–¥–µ –Ω–æ–≤
            // date: –∑–∞–ø–∞–∑–≤–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ –¥–∞—Ç–∞
            status: '–û—á–∞–∫–≤–∞–Ω', // reset —Å—Ç–∞—Ç—É—Å
            notes: '', // –∏–∑—á–∏—Å—Ç–≤–∞–º–µ –±–µ–ª–µ–∂–∫–∏—Ç–µ
            imageData: null // –ø—Ä–µ–º–∞—Ö–≤–∞–º–µ —Å–Ω–∏–º–∫–∞—Ç–∞
        } : order;

        const settings = this.state.get('settings');
        const clients = this.modules.clients.getAllClients();

        return `
        <div class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2>${isEdit ? '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –ø–æ—Ä—ä—á–∫–∞' :
            isDuplicate ? 'üìã –î—É–±–ª–∏—Ä–∞–Ω–µ –Ω–∞ –ø–æ—Ä—ä—á–∫–∞' :
                '‚ûï –ù–æ–≤–∞ –ø–æ—Ä—ä—á–∫–∞'}</h2>
                    <button class="modal-close" onclick="window.app.ui.modals.close()">‚úï</button>
                </div>
                
                <form id="order-form" class="modal-form">
                    <div class="form-row">
                        <div class="form-group">
                            <label>–î–∞—Ç–∞:</label>
                            <input type="date" id="orderDate" value="${formData?.date || new Date().toISOString().split('T')[0]}" required>
                        </div>
                        <div class="form-group">
                            <label>–ö–ª–∏–µ–Ω—Ç:</label>
                            <div class="input-with-button">
                                <input type="text" id="orderClient" list="clients-list" value="${formData?.client || ''}" required placeholder="–ò–∑–±–µ—Ä–µ—Ç–µ –∏–ª–∏ –≤—ä–≤–µ–¥–µ—Ç–µ –∫–ª–∏–µ–Ω—Ç">
                                <datalist id="clients-list">
                                    ${clients.map(c => `<option value="${c.name}">`).join('')}
                                </datalist>
                                <button type="button" class="input-addon-btn" onclick="window.app.ui.modals.quickAddClient()">+</button>
                            </div>
                            <div id="client-hint" class="hint-text"></div>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label>–¢–µ–ª–µ—Ñ–æ–Ω:</label>
                            <input type="tel" id="orderPhone" value="${formData?.phone || ''}">
                        </div>
                        <div class="form-group">
                            <label>–ò–∑—Ç–æ—á–Ω–∏–∫:</label>
                            <select id="orderOrigin" required>
                                ${settings.origins.map(o => `
                                    <option value="${o}" ${formData?.origin === o ? 'selected' : ''}>${o}</option>
                                `).join('')}
                            </select>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label>–î–æ—Å—Ç–∞–≤—á–∏–∫:</label>
                            <select id="orderVendor" required>
                                ${settings.vendors.map(v => `
                                    <option value="${v}" ${formData?.vendor === v ? 'selected' : ''}>${v}</option>
                                `).join('')}
                            </select>
                        </div>
                        <div class="form-group">
                            <label>–ú–æ–¥–µ–ª:</label>
                            <input type="text" id="orderModel" value="${formData?.model || ''}" required placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–æ–¥–µ–ª–∞">
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>–°–Ω–∏–º–∫–∞ –Ω–∞ –º–æ–¥–µ–ª–∞:</label>
                        <div class="image-upload-area">
                            <input type="file" id="orderImage" accept="image/*" style="display: none;">
                            <button type="button" class="btn btn-upload" onclick="document.getElementById('orderImage').click()">
                                üì∑ –ò–∑–±–µ—Ä–∏ —Å–Ω–∏–º–∫–∞
                            </button>
                            <div class="hint-text">–ò–ª–∏ –ø–æ—Å—Ç–∞–≤–µ—Ç–µ —Å–Ω–∏–º–∫–∞ —Å Ctrl+V</div>
                            <div id="image-preview" class="image-preview">
                                ${formData?.imageData ? `
                                    <img src="${formData.imageData}" class="preview-img">
                                    <button type="button" class="remove-img-btn" onclick="window.app.ui.modals.removeImage()">‚úï</button>
                                ` : '<div class="no-image">–ù—è–º–∞ –∏–∑–±—Ä–∞–Ω–∞ —Å–Ω–∏–º–∫–∞</div>'}
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label>–î–æ—Å—Ç–∞–≤–Ω–∞ —Ü–µ–Ω–∞ (USD):</label>
                            <input type="number" id="orderCostUSD" value="${formData?.costUSD || ''}" step="0.01" required>
                        </div>
                        <div class="form-group">
                            <label>–î–æ—Å—Ç–∞–≤–∫–∞ (USD):</label>
                            <input type="number" id="orderShippingUSD" value="${formData?.shippingUSD || settings.factoryShipping}" step="0.01">
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label>–î–æ–ø. —Ä–∞–∑—Ö–æ–¥–∏ (BGN):</label>
                            <input type="number" id="orderExtrasBGN" value="${formData?.extrasBGN || 0}" step="0.01">
                        </div>
                        <div class="form-group">
                            <label>–ü—Ä–æ–¥–∞–∂–Ω–∞ —Ü–µ–Ω–∞ (BGN):</label>
                            <input type="number" id="orderSellBGN" value="${formData?.sellBGN || ''}" step="0.01">
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label>–°—Ç–∞—Ç—É—Å:</label>
                            <select id="orderStatus">
                                <option value="–û—á–∞–∫–≤–∞–Ω" ${formData?.status === '–û—á–∞–∫–≤–∞–Ω' ? 'selected' : ''}>–û—á–∞–∫–≤–∞–Ω</option>
                                <option value="–î–æ—Å—Ç–∞–≤–µ–Ω" ${formData?.status === '–î–æ—Å—Ç–∞–≤–µ–Ω' ? 'selected' : ''}>–î–æ—Å—Ç–∞–≤–µ–Ω</option>
                                <option value="–°–≤–æ–±–æ–¥–µ–Ω" ${formData?.status === '–°–≤–æ–±–æ–¥–µ–Ω' ? 'selected' : ''}>–°–≤–æ–±–æ–¥–µ–Ω</option>
                                <option value="–î—Ä—É–≥–∏" ${formData?.status === '–î—Ä—É–≥–∏' ? 'selected' : ''}>–î—Ä—É–≥–∏</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="checkbox-label">
                                <input type="checkbox" id="orderFullSet" ${formData?.fullSet ? 'checked' : ''}>
                                –ü—ä–ª–µ–Ω —Å–µ—Ç
                            </label>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>–ë–µ–ª–µ–∂–∫–∏:</label>
                        <textarea id="orderNotes" rows="3">${formData?.notes || ''}</textarea>
                    </div>
                    
                    <div class="form-actions">
                        <button type="button" class="btn secondary" onclick="window.app.ui.modals.close()">–û—Ç–∫–∞–∑</button>
                        <button type="submit" class="btn primary">
                            ${isEdit ? '–ó–∞–ø–∞–∑–∏ –ø—Ä–æ–º–µ–Ω–∏—Ç–µ' :
            isDuplicate ? '–°—ä–∑–¥–∞–π –∫–æ–ø–∏–µ' :
                '–î–æ–±–∞–≤–∏ –ø–æ—Ä—ä—á–∫–∞'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    `;
    }

    renderClientModal(data) {
        const isEdit = data.mode === 'edit';
        const client = isEdit ? this.modules.clients.getClient(data.id) : null;
        const settings = this.state.get('settings');

        return `
            <div class="modal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2>${isEdit ? '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç' : 'üë§ –ù–æ–≤ –∫–ª–∏–µ–Ω—Ç'}</h2>
                        <button class="modal-close" onclick="window.app.ui.modals.close()">‚úï</button>
                    </div>
                    
                    <form id="client-form" class="modal-form">
                        <div class="form-group">
                            <label>–ò–º–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:</label>
                            <input type="text" id="clientName" value="${client?.name || ''}" required>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label>–¢–µ–ª–µ—Ñ–æ–Ω:</label>
                                <input type="tel" id="clientPhone" value="${client?.phone || ''}">
                            </div>
                            <div class="form-group">
                                <label>Email:</label>
                                <input type="email" id="clientEmail" value="${client?.email || ''}">
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label>–ê–¥—Ä–µ—Å:</label>
                            <textarea id="clientAddress" rows="2">${client?.address || ''}</textarea>
                        </div>
                        
                        <div class="form-group">
                            <label>–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω –∏–∑—Ç–æ—á–Ω–∏–∫:</label>
                            <select id="clientPreferredSource">
                                <option value="">–ù—è–º–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω–∏–µ</option>
                                ${settings.origins.map(o => `
                                    <option value="${o}" ${client?.preferredSource === o ? 'selected' : ''}>${o}</option>
                                `).join('')}
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label>–ë–µ–ª–µ–∂–∫–∏:</label>
                            <textarea id="clientNotes" rows="3" placeholder="–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω–∏—è, —Å–ø–µ—Ü–∏–∞–ª–Ω–∏ —É—Å–ª–æ–≤–∏—è...">${client?.notes || ''}</textarea>
                        </div>
                        
                        <div class="form-actions">
                            <button type="button" class="btn secondary" onclick="window.app.ui.modals.close()">–û—Ç–∫–∞–∑</button>
                            <button type="submit" class="btn primary">
                                ${isEdit ? '–ó–∞–ø–∞–∑–∏ –ø—Ä–æ–º–µ–Ω–∏—Ç–µ' : '–°—ä–∑–¥–∞–π –∫–ª–∏–µ–Ω—Ç'}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        `;
    }

    renderExpenseModal(data) {
        const isEdit = data.mode === 'edit';
        const expense = isEdit ? this.modules.expenses.getExpenses().find(e => e.id === data.id) : null;

        return `
            <div class="modal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2>${isEdit ? '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–∞–∑—Ö–æ–¥' : 'üí∞ –ù–æ–≤ —Ä–∞–∑—Ö–æ–¥'}</h2>
                        <button class="modal-close" onclick="window.app.ui.modals.close()">‚úï</button>
                    </div>
                    
                    <form id="expense-form" class="modal-form">
                        <div class="form-group">
                            <label>–ò–º–µ –Ω–∞ —Ä–∞–∑—Ö–æ–¥–∞:</label>
                            <input type="text" id="expenseName" value="${expense?.name || ''}" required>
                        </div>
                        
                        <div class="form-group">
                            <label>–°—É–º–∞ (BGN):</label>
                            <input type="number" id="expenseAmount" value="${expense?.amount || ''}" step="0.01" required>
                        </div>
                        
                        <div class="form-group">
                            <label>–ë–µ–ª–µ–∂–∫–∞:</label>
                            <textarea id="expenseNote" rows="3">${expense?.note || ''}</textarea>
                        </div>
                        
                        <div class="form-actions">
                            <button type="button" class="btn secondary" onclick="window.app.ui.modals.close()">–û—Ç–∫–∞–∑</button>
                            <button type="submit" class="btn primary">
                                ${isEdit ? '–ó–∞–ø–∞–∑–∏ –ø—Ä–æ–º–µ–Ω–∏—Ç–µ' : '–î–æ–±–∞–≤–∏ —Ä–∞–∑—Ö–æ–¥'}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        `;
    }

    renderInventoryModal(data) {
        const isEdit = data.mode === 'edit';
        const item = isEdit ? this.modules.inventory.getItem(data.id) : null;

        return `
        <div class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2>${isEdit ? '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∫—É—Ç–∏—è' : 'üì¶ –ù–æ–≤–∞ –∫—É—Ç–∏—è'}</h2>
                    <button class="modal-close" id="close-modal">‚úï</button>
                </div>
                
                <form id="inventory-form" class="modal-form">
                    <div class="form-group">
                        <label>–ë—Ä–∞–Ω–¥:</label>
                        <input type="text" id="itemBrand" value="${item?.brand || ''}" required>
                    </div>
                    
                    <div class="form-group">
                        <label>–¢–∏–ø:</label>
                        <select id="itemType" required>
                            <option value="—Å—Ç–∞–Ω–¥–∞—Ä—Ç" ${item?.type === '—Å—Ç–∞–Ω–¥–∞—Ä—Ç' ? 'selected' : ''}>–°—Ç–∞–Ω–¥–∞—Ä—Ç</option>
                            <option value="–ø—Ä–µ–º–∏—É–º" ${item?.type === '–ø—Ä–µ–º–∏—É–º' ? 'selected' : ''}>–ü—Ä–µ–º–∏—É–º</option>
                        </select>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label>–î–æ—Å—Ç–∞–≤–Ω–∞ —Ü–µ–Ω–∞ (–ª–≤):</label>
                            <input type="number" id="itemPurchasePrice" value="${item?.purchasePrice || ''}" step="0.01" required>
                        </div>
                        <div class="form-group">
                            <label>–ü—Ä–æ–¥–∞–∂–Ω–∞ —Ü–µ–Ω–∞ (–ª–≤):</label>
                            <input type="number" id="itemSellPrice" value="${item?.sellPrice || ''}" step="0.01" required>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label>–ù–∞–ª–∏—á–Ω–æ—Å—Ç (–±—Ä.):</label>
                            <input type="number" id="itemStock" value="${item?.stock || 0}" min="0" required>
                        </div>
                        <div class="form-group">
                            <label>–ü–æ—Ä—ä—á–∞–Ω–∏ (–±—Ä.):</label>
                            <input type="number" id="itemOrdered" value="${item?.ordered || 0}" min="0">
                        </div>
                    </div>
                    
                    <div class="form-actions">
                        <button type="button" class="btn secondary" id="cancel-btn">–û—Ç–∫–∞–∑</button>
                        <button type="submit" class="btn primary">
                            ${isEdit ? '–ó–∞–ø–∞–∑–∏' : '–î–æ–±–∞–≤–∏'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    `;
    }

    renderImageModal(data) {
        return `
        <div class="modal">
            <div class="modal-content modal-image">
                <div class="modal-header">
                    <h2>üì∑ ${data.title || '–°–Ω–∏–º–∫–∞ –Ω–∞ –º–æ–¥–µ–ª'}</h2>
                    <button class="modal-close" onclick="window.app.ui.modals.close()">‚úï</button>
                </div>
                <div class="modal-image-body">
                    <img src="${data.imageSrc}" alt="${data.title}" class="full-image">
                    <p class="image-caption">${data.caption || ''}</p>
                </div>
            </div>
        </div>
    `;
    }

    renderClientProfileModal(data) {
        const client = this.modules.clients.getClient(data.id);
        const stats = this.modules.clients.getClientStats(client.name);
        const orders = this.modules.clients.getClientOrders(client.name);

        return `
            <div class="modal">
                <div class="modal-content modal-large">
                    <div class="modal-header">
                        <h2>üë§ ${client.name}</h2>
                        <button class="modal-close" onclick="window.app.ui.modals.close()">‚úï</button>
                    </div>
                    
                    <div class="client-profile">
                        <div class="profile-info">
                            <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${client.phone || '–ù—è–º–∞'}</p>
                            <p><strong>Email:</strong> ${client.email || '–ù—è–º–∞'}</p>
                            <p><strong>–ê–¥—Ä–µ—Å:</strong> ${client.address || '–ù—è–º–∞'}</p>
                            <p><strong>–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω –∏–∑—Ç–æ—á–Ω–∏–∫:</strong> ${client.preferredSource || '–ù—è–º–∞'}</p>
                            <p><strong>–ë–µ–ª–µ–∂–∫–∏:</strong> ${client.notes || '–ù—è–º–∞'}</p>
                        </div>
                        
                        <div class="profile-stats">
                            <div class="stat-card">
                                <div class="stat-label">–û–±—â–æ –ø–æ—Ä—ä—á–∫–∏</div>
                                <div class="stat-value">${stats.totalOrders}</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-label">–û–±—â –ø—Ä–∏—Ö–æ–¥</div>
                                <div class="stat-value">${stats.totalRevenue.toFixed(2)} –ª–≤</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-label">–û–±—â–∞ –ø–µ—á–∞–ª–±–∞</div>
                                <div class="stat-value">${stats.totalProfit.toFixed(2)} –ª–≤</div>
                            </div>
                        </div>
                        
                        <h3>–ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ø–æ—Ä—ä—á–∫–∏:</h3>
                        ${orders.length > 0 ? `
                            <table class="orders-history">
                                <thead>
                                    <tr>
                                        <th>–î–∞—Ç–∞</th>
                                        <th>–ú–æ–¥–µ–ª</th>
                                        <th>–°—É–º–∞</th>
                                        <th>–°—Ç–∞—Ç—É—Å</th>
                                    </tr>
                                </thead>
                                <tbody>
${orders.map(o => `
    <tr>
        <td>${new Date(o.date).toLocaleDateString('bg-BG')}</td>
        <td class="image-cell">
            ${o.imageData ?
            `<img src="${o.imageData}" 
                     class="model-image" 
                     alt="${o.model}" 
                     title="${o.model}"
                     onclick="window.app.ui.modals.open({
                         type: 'image',
                         imageSrc: '${o.imageData}',
                         title: '${o.model}',
                         caption: '–ö–ª–∏–µ–Ω—Ç: ${o.client} | –î–∞—Ç–∞: ${new Date(o.date).toLocaleDateString('bg-BG')}'
                     })">` :
            `<div class="no-image-placeholder">${o.model}</div>`
        }
        </td>
        <td>${o.sellBGN.toFixed(2)} –ª–≤</td>
        <td><span class="status-badge ${this.modules.orders.getStatusClass(o.status)}">${o.status}</span></td>
    </tr>
`).join('')}
                                </tbody>
                            </table>
                        ` : '<p>–ù—è–º–∞ –ø–æ—Ä—ä—á–∫–∏</p>'}
                    </div>
                    
                    <div class="form-actions">
                        <button type="button" class="btn secondary" onclick="window.app.ui.modals.close()">–ó–∞—Ç–≤–æ—Ä–∏</button>
                        <button type="button" class="btn primary" onclick="window.app.ui.modals.editClient('${client.id}')">
                            –†–µ–¥–∞–∫—Ç–∏—Ä–∞–π –∫–ª–∏–µ–Ω—Ç–∞
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    attachModalListeners() {
        // Order form
        const orderForm = document.getElementById('order-form');
        if (orderForm) {
            orderForm.addEventListener('submit', (e) => this.handleOrderSubmit(e));

            // Client field change
            document.getElementById('orderClient')?.addEventListener('input', (e) => {
                this.updateClientHint(e.target.value);
            });

            // Image upload
            document.getElementById('orderImage')?.addEventListener('change', (e) => {
                this.handleImageUpload(e.target.files[0]);
            });
        }

        const inventoryForm = document.getElementById('inventory-form');
        if (inventoryForm) {
            inventoryForm.addEventListener('submit', (e) => this.handleInventorySubmit(e));
        }

        // Client form
        const clientForm = document.getElementById('client-form');
        if (clientForm) {
            clientForm.addEventListener('submit', (e) => this.handleClientSubmit(e));
        }

        // Expense form
        const expenseForm = document.getElementById('expense-form');
        if (expenseForm) {
            expenseForm.addEventListener('submit', (e) => this.handleExpenseSubmit(e));
        }
    }

    handleOrderSubmit(e) {
        e.preventDefault();

        const orderData = {
            date: document.getElementById('orderDate').value,
            client: document.getElementById('orderClient').value,
            phone: document.getElementById('orderPhone').value,
            origin: document.getElementById('orderOrigin').value,
            vendor: document.getElementById('orderVendor').value,
            model: document.getElementById('orderModel').value,
            costUSD: document.getElementById('orderCostUSD').value,
            shippingUSD: document.getElementById('orderShippingUSD').value,
            extrasBGN: document.getElementById('orderExtrasBGN').value,
            sellBGN: document.getElementById('orderSellBGN').value,
            status: document.getElementById('orderStatus').value,
            fullSet: document.getElementById('orderFullSet').checked,
            notes: document.getElementById('orderNotes').value,
            imageData: this.tempImageData || (this.currentModal.mode === 'edit' ?
                this.modules.orders.getOrders().find(o => o.id === this.currentModal.id)?.imageData : null)
        };

        let result;
        if (this.currentModal.mode === 'edit') {
            result = this.modules.orders.update(this.currentModal.id, orderData);
            this.eventBus.emit('notification:show', { message: '–ü–æ—Ä—ä—á–∫–∞—Ç–∞ –µ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–∞!', type: 'success' });
        } else {
            // Both 'create' and 'duplicate' create new orders
            result = this.modules.orders.create(orderData);
            const message = this.currentModal.mode === 'duplicate' ?
                '–ö–æ–ø–∏–µ—Ç–æ –Ω–∞ –ø–æ—Ä—ä—á–∫–∞—Ç–∞ –µ —Å—ä–∑–¥–∞–¥–µ–Ω–æ!' : '–ü–æ—Ä—ä—á–∫–∞—Ç–∞ –µ –¥–æ–±–∞–≤–µ–Ω–∞!';
            this.eventBus.emit('notification:show', { message, type: 'success' });
        }

        this.close();

        // –ò–∑–ø–æ–ª–∑–≤–∞–π smartRefresh –∞–∫–æ –µ –¥–æ—Å—Ç—ä–ø–Ω–æ
        if (window.app.ui.currentView?.smartRefresh) {
            window.app.ui.currentView.smartRefresh(result);
        } else if (window.app.ui.currentView?.refresh) {
            window.app.ui.currentView.refresh();
        }
    }

    handleClientSubmit(e) {
        e.preventDefault();

        const clientData = {
            name: document.getElementById('clientName').value,
            phone: document.getElementById('clientPhone').value,
            email: document.getElementById('clientEmail').value,
            address: document.getElementById('clientAddress').value,
            preferredSource: document.getElementById('clientPreferredSource').value,
            notes: document.getElementById('clientNotes').value
        };

        if (this.currentModal.mode === 'edit') {
            this.modules.clients.update(this.currentModal.id, clientData);
            this.eventBus.emit('notification:show', { message: '–ö–ª–∏–µ–Ω—Ç—ä—Ç –µ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω!', type: 'success' });
        } else {
            this.modules.clients.create(clientData);
            this.eventBus.emit('notification:show', { message: '–ö–ª–∏–µ–Ω—Ç—ä—Ç –µ —Å—ä–∑–¥–∞–¥–µ–Ω!', type: 'success' });
        }

        this.close();

        // Refresh current view
        if (window.app.ui.currentView?.refresh) {
            window.app.ui.currentView.refresh();
        }
    }

    handleExpenseSubmit(e) {
        e.preventDefault();

        const expenseData = {
            name: document.getElementById('expenseName').value,
            amount: document.getElementById('expenseAmount').value,
            note: document.getElementById('expenseNote').value
        };

        if (this.currentModal.mode === 'edit') {
            this.modules.expenses.update(this.currentModal.id, expenseData);
            this.eventBus.emit('notification:show', { message: '–†–∞–∑—Ö–æ–¥—ä—Ç –µ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω!', type: 'success' });
        } else {
            this.modules.expenses.create(expenseData);
            this.eventBus.emit('notification:show', { message: '–†–∞–∑—Ö–æ–¥—ä—Ç –µ –¥–æ–±–∞–≤–µ–Ω!', type: 'success' });
        }

        this.close();

        // Refresh current view
        if (window.app.ui.currentView?.refresh) {
            window.app.ui.currentView.refresh();
        }
    }

    handleInventorySubmit(e) {
        e.preventDefault();

        const itemData = {
            brand: document.getElementById('itemBrand').value,
            type: document.getElementById('itemType').value,
            purchasePrice: document.getElementById('itemPurchasePrice').value,
            sellPrice: document.getElementById('itemSellPrice').value,
            stock: document.getElementById('itemStock').value,
            ordered: document.getElementById('itemOrdered').value
        };

        if (this.currentModal.mode === 'edit') {
            this.modules.inventory.updateItem(this.currentModal.id, itemData);
            this.eventBus.emit('notification:show', { message: '–ö—É—Ç–∏—è—Ç–∞ –µ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–∞!', type: 'success' });
        } else {
            this.modules.inventory.createItem(itemData);
            this.eventBus.emit('notification:show', { message: '–ö—É—Ç–∏—è—Ç–∞ –µ –¥–æ–±–∞–≤–µ–Ω–∞!', type: 'success' });
        }

        this.close();

        if (window.app.ui.currentView?.refresh) {
            window.app.ui.currentView.refresh();
        }
    }

    handleImageUpload(file) {
        if (file && file.type.startsWith('image/')) {
            const reader = new FileReader();
            reader.onload = (e) => {
                this.tempImageData = e.target.result;
                this.updateImagePreview(e.target.result);
            };
            reader.readAsDataURL(file);
        }
    }

    handleImagePaste(e) {
        const items = e.clipboardData.items;
        for (let i = 0; i < items.length; i++) {
            if (items[i].type.indexOf('image') !== -1) {
                const file = items[i].getAsFile();
                this.handleImageUpload(file);
                e.preventDefault();
                this.eventBus.emit('notification:show', { message: '–°–Ω–∏–º–∫–∞—Ç–∞ –µ –ø–æ—Å—Ç–∞–≤–µ–Ω–∞!', type: 'info' });
                break;
            }
        }
    }

    updateImagePreview(imageSrc) {
        const preview = document.getElementById('image-preview');
        if (preview) {
            preview.innerHTML = `
                <img src="${imageSrc}" class="preview-img">
                <button type="button" class="remove-img-btn" onclick="window.app.ui.modals.removeImage()">‚úï</button>
            `;
        }
    }

    removeImage() {
        this.tempImageData = null;
        const preview = document.getElementById('image-preview');
        if (preview) {
            preview.innerHTML = '<div class="no-image">–ù—è–º–∞ –∏–∑–±—Ä–∞–Ω–∞ —Å–Ω–∏–º–∫–∞</div>';
        }
    }

    updateClientHint(clientName) {
        const hint = document.getElementById('client-hint');
        if (!hint) return;

        const client = this.modules.clients.getClientByName(clientName);
        if (client) {
            const stats = this.modules.clients.getClientStats(client.name);
            hint.innerHTML = `
                üìû ${client.phone || '–ù—è–º–∞ —Ç–µ–ª.'} | 
                üìä ${stats.totalOrders} –ø–æ—Ä—ä—á–∫–∏ | 
                üí∞ ${stats.totalRevenue.toFixed(2)} –ª–≤
            `;
            hint.style.display = 'block';

            // Auto-fill phone if empty
            const phoneField = document.getElementById('orderPhone');
            if (phoneField && !phoneField.value && client.phone) {
                phoneField.value = client.phone;
            }
        } else {
            hint.style.display = 'none';
        }
    }

    quickAddClient() {
        const clientName = document.getElementById('orderClient').value;
        if (!clientName) {
            this.eventBus.emit('notification:show', {
                message: '–ú–æ–ª—è –≤—ä–≤–µ–¥–µ—Ç–µ –∏–º–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç',
                type: 'error'
            });
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç—ä—Ç –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
        const existingClient = this.modules.clients.getClientByName(clientName);
        if (existingClient) {
            this.eventBus.emit('notification:show', {
                message: '–ö–ª–∏–µ–Ω—Ç—ä—Ç –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞',
                type: 'info'
            });
            return;
        }

        // –î–∏—Ä–µ–∫—Ç–Ω–æ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç
        const newClient = this.modules.clients.create({
            name: clientName,
            phone: document.getElementById('orderPhone').value || '',
            preferredSource: document.getElementById('orderOrigin').value || '',
            notes: '–î–æ–±–∞–≤–µ–Ω –æ—Ç –ø–æ—Ä—ä—á–∫–∞'
        });

        this.eventBus.emit('notification:show', {
            message: `–ö–ª–∏–µ–Ω—Ç "${clientName}" –µ –¥–æ–±–∞–≤–µ–Ω!`,
            type: 'success'
        });

        // –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ datalist
        this.updateClientsDatalist();
    }

    updateClientsDatalist() {
        const datalist = document.getElementById('clients-list');
        if (datalist) {
            datalist.innerHTML = '';
            const clients = this.modules.clients.getAllClients();
            clients.forEach(client => {
                const option = document.createElement('option');
                option.value = client.name;
                datalist.appendChild(option);
            });
        }
    }

    editClient(clientId) {
        this.close();
        setTimeout(() => {
            this.open({ type: 'client', mode: 'edit', id: clientId });
        }, 100);
    }
}