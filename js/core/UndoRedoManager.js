// js/core/UndoRedoManager.js - –ü–û–î–û–ë–†–ï–ù–ê –í–ï–†–°–ò–Ø –° –ü–û-–î–û–ë–†–ò –ù–û–¢–ò–§–ò–ö–ê–¶–ò–ò
export class UndoRedoManager {
    constructor(state, storage, eventBus) {
        this.state = state;
        this.storage = storage;
        this.eventBus = eventBus;

        // –°—Ç–µ–∫–æ–≤–µ –∑–∞ undo/redo
        this.undoStack = [];
        this.redoStack = [];
        this.maxStackSize = 50;

        // –§–ª–∞–≥ –∑–∞ –¥–∞ –∏–∑–±–µ–≥–Ω–µ–º –±–µ–∑–∫—Ä–∞–π–Ω–∏ —Ü–∏–∫–ª–∏
        this.isUndoRedoOperation = false;

        this.setupEventListeners();
        this.setupKeyboardShortcuts();

        console.log('üîÑ UndoRedoManager initialized');
    }

    setupEventListeners() {
        const trackedEvents = [
            'order:created', 'order:updated', 'order:deleted',
            'client:created', 'client:updated', 'client:deleted',
            'expense:created', 'expense:updated', 'expense:deleted',
            'inventory:created', 'inventory:updated', 'inventory:deleted'
        ];

        trackedEvents.forEach(event => {
            this.eventBus.on(event, (data) => {
                if (!this.isUndoRedoOperation) {
                    this.saveState(event, data);
                }
            });
        });
    }

    setupKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            // Ctrl+Z –∑–∞ Undo
            if (e.ctrlKey && e.key === 'z' && !e.shiftKey) {
                e.preventDefault();
                this.undo();
            }

            // Ctrl+Shift+Z –∏–ª–∏ Ctrl+Y –∑–∞ Redo
            if ((e.ctrlKey && e.shiftKey && e.key === 'Z') || (e.ctrlKey && e.key === 'y')) {
                e.preventDefault();
                this.redo();
            }
        });
    }

    saveState(action, data) {
        // –ó–∞–ø–∞–∑–≤–∞–º–µ —Ç–µ–∫—É—â–æ—Ç–æ —Å—ä—Å—Ç–æ—è–Ω–∏–µ –ü–†–ï–î–ò –ø—Ä–æ–º—è–Ω–∞—Ç–∞
        const currentState = {
            monthlyData: JSON.parse(JSON.stringify(this.state.get('monthlyData'))),
            clientsData: JSON.parse(JSON.stringify(this.state.get('clientsData'))),
            inventory: JSON.parse(JSON.stringify(this.state.get('inventory'))),
            timestamp: Date.now(),
            action: action,
            data: this.extractActionData(action, data)
        };

        this.undoStack.push(currentState);

        // –û–≥—Ä–∞–Ω–∏—á–∞–≤–∞–º–µ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ —Å—Ç–µ–∫–∞
        if (this.undoStack.length > this.maxStackSize) {
            this.undoStack.shift();
        }

        // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ redo —Å—Ç–µ–∫–∞ –ø—Ä–∏ –Ω–æ–≤–æ –¥–µ–π—Å—Ç–≤–∏–µ
        this.redoStack = [];

        console.log(`üíæ State saved for action: ${action} (Stack size: ${this.undoStack.length})`);
    }

    extractActionData(action, data) {
        // –ò–∑–≤–ª–∏—á–∞–º–µ –ø–æ–ª–µ–∑–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –≤ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è—Ç–∞
        if (action.includes('order')) {
            return {
                type: 'order',
                client: data?.client || 'Unknown',
                model: data?.model || 'Unknown'
            };
        } else if (action.includes('client')) {
            return {
                type: 'client',
                name: data?.name || 'Unknown'
            };
        } else if (action.includes('expense')) {
            return {
                type: 'expense',
                name: data?.name || 'Unknown'
            };
        } else if (action.includes('inventory')) {
            return {
                type: 'inventory',
                brand: data?.brand || 'Unknown'
            };
        }

        return { type: 'unknown' };
    }

    undo() {
        if (this.undoStack.length === 0) {
            this.showUndoNotification('–ù—è–º–∞ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞ –≤—Ä—ä—â–∞–Ω–µ', 'info');
            return false;
        }

        // –ó–∞–ø–∞–∑–≤–∞–º–µ —Ç–µ–∫—É—â–æ—Ç–æ —Å—ä—Å—Ç–æ—è–Ω–∏–µ –≤ redo —Å—Ç–µ–∫–∞
        const currentState = {
            monthlyData: JSON.parse(JSON.stringify(this.state.get('monthlyData'))),
            clientsData: JSON.parse(JSON.stringify(this.state.get('clientsData'))),
            inventory: JSON.parse(JSON.stringify(this.state.get('inventory'))),
            timestamp: Date.now()
        };

        this.redoStack.push(currentState);

        // –í–∑–∏–º–∞–º–µ –ø–æ—Å–ª–µ–¥–Ω–æ—Ç–æ —Å—ä—Å—Ç–æ—è–Ω–∏–µ –æ—Ç undo —Å—Ç–µ–∫–∞
        const previousState = this.undoStack.pop();

        // –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ
        this.restoreState(previousState);

        // –ü–æ–∫–∞–∑–≤–∞–º–µ –ø–æ–¥—Ä–æ–±–Ω–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        this.showUndoNotification(this.getUndoMessage(previousState), 'success');

        console.log(`‚Ü©Ô∏è Undo performed: ${previousState.action}`);
        return true;
    }

    redo() {
        if (this.redoStack.length === 0) {
            this.showUndoNotification('–ù—è–º–∞ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ', 'info');
            return false;
        }

        // –ó–∞–ø–∞–∑–≤–∞–º–µ —Ç–µ–∫—É—â–æ—Ç–æ —Å—ä—Å—Ç–æ—è–Ω–∏–µ –≤ undo —Å—Ç–µ–∫–∞
        const currentState = {
            monthlyData: JSON.parse(JSON.stringify(this.state.get('monthlyData'))),
            clientsData: JSON.parse(JSON.stringify(this.state.get('clientsData'))),
            inventory: JSON.parse(JSON.stringify(this.state.get('inventory'))),
            timestamp: Date.now()
        };

        this.undoStack.push(currentState);

        // –í–∑–∏–º–∞–º–µ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –æ—Ç redo —Å—Ç–µ–∫–∞
        const nextState = this.redoStack.pop();

        // –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ
        this.restoreState(nextState);

        this.showUndoNotification('‚Ü™Ô∏è –ü–æ–≤—Ç–æ—Ä–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ', 'success');

        console.log('‚Ü™Ô∏è Redo performed');
        return true;
    }

    restoreState(state) {
        this.isUndoRedoOperation = true;

        this.state.set('monthlyData', state.monthlyData);
        this.state.set('clientsData', state.clientsData);
        this.state.set('inventory', state.inventory);

        // –ó–∞–ø–∞–∑–≤–∞–º–µ –≤ localStorage
        this.storage.save('monthlyData', state.monthlyData);
        this.storage.save('clientsData', state.clientsData);
        this.storage.save('inventory', state.inventory);

        this.isUndoRedoOperation = false;

        // –û–ø—Ä–µ—Å–Ω—è–≤–∞–º–µ UI
        this.refreshCurrentView();
    }

    getUndoMessage(state) {
        const action = this.getActionText(state.action);
        const data = state.data;

        if (data?.type === 'order') {
            return `‚Ü©Ô∏è –í—ä—Ä–Ω–∞—Ç–æ: ${action} (${data.client} - ${data.model})`;
        } else if (data?.type === 'client') {
            return `‚Ü©Ô∏è –í—ä—Ä–Ω–∞—Ç–æ: ${action} (${data.name})`;
        } else if (data?.type === 'expense') {
            return `‚Ü©Ô∏è –í—ä—Ä–Ω–∞—Ç–æ: ${action} (${data.name})`;
        } else if (data?.type === 'inventory') {
            return `‚Ü©Ô∏è –í—ä—Ä–Ω–∞—Ç–æ: ${action} (${data.brand})`;
        }

        return `‚Ü©Ô∏è –í—ä—Ä–Ω–∞—Ç–æ: ${action}`;
    }

    showUndoNotification(message, type) {
        // –°—ä–∑–¥–∞–≤–∞–º–µ —Å–ø–µ—Ü–∏–∞–ª–Ω–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å Undo/Redo –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        const container = document.getElementById('notification-container');
        if (!container) return;

        const notification = document.createElement('div');
        notification.className = `notification undo-notification ${type}`;

        // –î–æ–±–∞–≤—è–º–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —Ç–µ–∫—É—â–æ—Ç–æ —Å—ä—Å—Ç–æ—è–Ω–∏–µ
        const undoCount = this.getUndoCount();
        const redoCount = this.getRedoCount();

        notification.innerHTML = `
            <div class="notification-content">
                <div class="notification-message">${message}</div>
                <div class="notification-counter">Undo: ${undoCount} | Redo: ${redoCount}</div>
            </div>
        `;

        container.appendChild(notification);

        // –ü–æ-–¥—ä–ª–≥–æ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –∑–∞ undo/redo –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        setTimeout(() => notification.remove(), 4000);
    }

    getActionText(action) {
        const actionTexts = {
            'order:created': '–°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ä—ä—á–∫–∞',
            'order:updated': '–†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –ø–æ—Ä—ä—á–∫–∞',
            'order:deleted': '–ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ä—ä—á–∫–∞',
            'client:created': '–°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç',
            'client:updated': '–†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç',
            'client:deleted': '–ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç',
            'expense:created': '–°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Ä–∞–∑—Ö–æ–¥',
            'expense:updated': '–†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–∞–∑—Ö–æ–¥',
            'expense:deleted': '–ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ —Ä–∞–∑—Ö–æ–¥',
            'inventory:created': '–°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª',
            'inventory:updated': '–†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª',
            'inventory:deleted': '–ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª'
        };

        return actionTexts[action] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ';
    }

    refreshCurrentView() {
        if (window.app?.ui?.currentView?.refresh) {
            setTimeout(() => {
                window.app.ui.currentView.refresh();
            }, 100);
        }

        // –û–±–Ω–æ–≤—è–≤–∞–º–µ –∏ Undo/Redo –±—É—Ç–æ–Ω–∏—Ç–µ
        if (window.app?.ui?.updateUndoRedoButtons) {
            window.app.ui.updateUndoRedoButtons();
        }
    }

    canUndo() {
        return this.undoStack.length > 0;
    }

    canRedo() {
        return this.redoStack.length > 0;
    }

    getUndoCount() {
        return this.undoStack.length;
    }

    getRedoCount() {
        return this.redoStack.length;
    }

    clear() {
        this.undoStack = [];
        this.redoStack = [];
        console.log('üóëÔ∏è Undo/Redo stacks cleared');
    }

    // Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    getDebugInfo() {
        return {
            undoStackSize: this.undoStack.length,
            redoStackSize: this.redoStack.length,
            canUndo: this.canUndo(),
            canRedo: this.canRedo(),
            lastActions: this.undoStack.slice(-5).map(s => ({
                action: s.action,
                data: s.data,
                time: new Date(s.timestamp).toLocaleTimeString()
            }))
        };
    }
}